/* automatically generated by rust-bindgen 0.57.0 */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const WGPU_WHOLE_SIZE: i32 = -1;
pub const WGPU_COPY_STRIDE_UNDEFINED: u32 = 4294967295;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type size_t = ::std::os::raw::c_ulong;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type WGPUFlags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUAdapterImpl {
    _unused: [u8; 0],
}
pub type WGPUAdapter = *mut WGPUAdapterImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupImpl {
    _unused: [u8; 0],
}
pub type WGPUBindGroup = *mut WGPUBindGroupImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupLayoutImpl {
    _unused: [u8; 0],
}
pub type WGPUBindGroupLayout = *mut WGPUBindGroupLayoutImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferImpl {
    _unused: [u8; 0],
}
pub type WGPUBuffer = *mut WGPUBufferImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandBufferImpl {
    _unused: [u8; 0],
}
pub type WGPUCommandBuffer = *mut WGPUCommandBufferImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPUCommandEncoder = *mut WGPUCommandEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePassEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPUComputePassEncoder = *mut WGPUComputePassEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePipelineImpl {
    _unused: [u8; 0],
}
pub type WGPUComputePipeline = *mut WGPUComputePipelineImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUDeviceImpl {
    _unused: [u8; 0],
}
pub type WGPUDevice = *mut WGPUDeviceImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUInstanceImpl {
    _unused: [u8; 0],
}
pub type WGPUInstance = *mut WGPUInstanceImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUPipelineLayoutImpl {
    _unused: [u8; 0],
}
pub type WGPUPipelineLayout = *mut WGPUPipelineLayoutImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUQuerySetImpl {
    _unused: [u8; 0],
}
pub type WGPUQuerySet = *mut WGPUQuerySetImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUQueueImpl {
    _unused: [u8; 0],
}
pub type WGPUQueue = *mut WGPUQueueImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleImpl {
    _unused: [u8; 0],
}
pub type WGPURenderBundle = *mut WGPURenderBundleImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPURenderBundleEncoder = *mut WGPURenderBundleEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPURenderPassEncoder = *mut WGPURenderPassEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPipelineImpl {
    _unused: [u8; 0],
}
pub type WGPURenderPipeline = *mut WGPURenderPipelineImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSamplerImpl {
    _unused: [u8; 0],
}
pub type WGPUSampler = *mut WGPUSamplerImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUShaderModuleImpl {
    _unused: [u8; 0],
}
pub type WGPUShaderModule = *mut WGPUShaderModuleImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceImpl {
    _unused: [u8; 0],
}
pub type WGPUSurface = *mut WGPUSurfaceImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSwapChainImpl {
    _unused: [u8; 0],
}
pub type WGPUSwapChain = *mut WGPUSwapChainImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureImpl {
    _unused: [u8; 0],
}
pub type WGPUTexture = *mut WGPUTextureImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureViewImpl {
    _unused: [u8; 0],
}
pub type WGPUTextureView = *mut WGPUTextureViewImpl;
pub const WGPUAdapterType_WGPUAdapterType_DiscreteGPU: WGPUAdapterType = 0;
pub const WGPUAdapterType_WGPUAdapterType_IntegratedGPU: WGPUAdapterType = 1;
pub const WGPUAdapterType_WGPUAdapterType_CPU: WGPUAdapterType = 2;
pub const WGPUAdapterType_WGPUAdapterType_Unknown: WGPUAdapterType = 3;
pub const WGPUAdapterType_WGPUAdapterType_Force32: WGPUAdapterType = 2147483647;
pub type WGPUAdapterType = ::std::os::raw::c_uint;
pub const WGPUAddressMode_WGPUAddressMode_Repeat: WGPUAddressMode = 0;
pub const WGPUAddressMode_WGPUAddressMode_MirrorRepeat: WGPUAddressMode = 1;
pub const WGPUAddressMode_WGPUAddressMode_ClampToEdge: WGPUAddressMode = 2;
pub const WGPUAddressMode_WGPUAddressMode_Force32: WGPUAddressMode = 2147483647;
pub type WGPUAddressMode = ::std::os::raw::c_uint;
pub const WGPUBackendType_WGPUBackendType_Null: WGPUBackendType = 0;
pub const WGPUBackendType_WGPUBackendType_D3D11: WGPUBackendType = 1;
pub const WGPUBackendType_WGPUBackendType_D3D12: WGPUBackendType = 2;
pub const WGPUBackendType_WGPUBackendType_Metal: WGPUBackendType = 3;
pub const WGPUBackendType_WGPUBackendType_Vulkan: WGPUBackendType = 4;
pub const WGPUBackendType_WGPUBackendType_OpenGL: WGPUBackendType = 5;
pub const WGPUBackendType_WGPUBackendType_OpenGLES: WGPUBackendType = 6;
pub const WGPUBackendType_WGPUBackendType_Force32: WGPUBackendType = 2147483647;
pub type WGPUBackendType = ::std::os::raw::c_uint;
pub const WGPUBlendFactor_WGPUBlendFactor_Zero: WGPUBlendFactor = 0;
pub const WGPUBlendFactor_WGPUBlendFactor_One: WGPUBlendFactor = 1;
pub const WGPUBlendFactor_WGPUBlendFactor_SrcColor: WGPUBlendFactor = 2;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusSrcColor: WGPUBlendFactor = 3;
pub const WGPUBlendFactor_WGPUBlendFactor_SrcAlpha: WGPUBlendFactor = 4;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusSrcAlpha: WGPUBlendFactor = 5;
pub const WGPUBlendFactor_WGPUBlendFactor_DstColor: WGPUBlendFactor = 6;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusDstColor: WGPUBlendFactor = 7;
pub const WGPUBlendFactor_WGPUBlendFactor_DstAlpha: WGPUBlendFactor = 8;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusDstAlpha: WGPUBlendFactor = 9;
pub const WGPUBlendFactor_WGPUBlendFactor_SrcAlphaSaturated: WGPUBlendFactor = 10;
pub const WGPUBlendFactor_WGPUBlendFactor_BlendColor: WGPUBlendFactor = 11;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusBlendColor: WGPUBlendFactor = 12;
pub const WGPUBlendFactor_WGPUBlendFactor_Force32: WGPUBlendFactor = 2147483647;
pub type WGPUBlendFactor = ::std::os::raw::c_uint;
pub const WGPUBlendOperation_WGPUBlendOperation_Add: WGPUBlendOperation = 0;
pub const WGPUBlendOperation_WGPUBlendOperation_Subtract: WGPUBlendOperation = 1;
pub const WGPUBlendOperation_WGPUBlendOperation_ReverseSubtract: WGPUBlendOperation = 2;
pub const WGPUBlendOperation_WGPUBlendOperation_Min: WGPUBlendOperation = 3;
pub const WGPUBlendOperation_WGPUBlendOperation_Max: WGPUBlendOperation = 4;
pub const WGPUBlendOperation_WGPUBlendOperation_Force32: WGPUBlendOperation = 2147483647;
pub type WGPUBlendOperation = ::std::os::raw::c_uint;
pub const WGPUBufferBindingType_WGPUBufferBindingType_Undefined: WGPUBufferBindingType = 0;
pub const WGPUBufferBindingType_WGPUBufferBindingType_Uniform: WGPUBufferBindingType = 1;
pub const WGPUBufferBindingType_WGPUBufferBindingType_Storage: WGPUBufferBindingType = 2;
pub const WGPUBufferBindingType_WGPUBufferBindingType_ReadOnlyStorage: WGPUBufferBindingType = 3;
pub const WGPUBufferBindingType_WGPUBufferBindingType_Force32: WGPUBufferBindingType = 2147483647;
pub type WGPUBufferBindingType = ::std::os::raw::c_uint;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Success: WGPUBufferMapAsyncStatus = 0;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Error: WGPUBufferMapAsyncStatus = 1;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Unknown: WGPUBufferMapAsyncStatus = 2;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_DeviceLost: WGPUBufferMapAsyncStatus =
    3;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_DestroyedBeforeCallback:
    WGPUBufferMapAsyncStatus = 4;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_UnmappedBeforeCallback:
    WGPUBufferMapAsyncStatus = 5;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Force32: WGPUBufferMapAsyncStatus =
    2147483647;
pub type WGPUBufferMapAsyncStatus = ::std::os::raw::c_uint;
pub const WGPUCompareFunction_WGPUCompareFunction_Undefined: WGPUCompareFunction = 0;
pub const WGPUCompareFunction_WGPUCompareFunction_Never: WGPUCompareFunction = 1;
pub const WGPUCompareFunction_WGPUCompareFunction_Less: WGPUCompareFunction = 2;
pub const WGPUCompareFunction_WGPUCompareFunction_LessEqual: WGPUCompareFunction = 3;
pub const WGPUCompareFunction_WGPUCompareFunction_Greater: WGPUCompareFunction = 4;
pub const WGPUCompareFunction_WGPUCompareFunction_GreaterEqual: WGPUCompareFunction = 5;
pub const WGPUCompareFunction_WGPUCompareFunction_Equal: WGPUCompareFunction = 6;
pub const WGPUCompareFunction_WGPUCompareFunction_NotEqual: WGPUCompareFunction = 7;
pub const WGPUCompareFunction_WGPUCompareFunction_Always: WGPUCompareFunction = 8;
pub const WGPUCompareFunction_WGPUCompareFunction_Force32: WGPUCompareFunction = 2147483647;
pub type WGPUCompareFunction = ::std::os::raw::c_uint;
pub const WGPUCreateReadyPipelineStatus_WGPUCreateReadyPipelineStatus_Success:
    WGPUCreateReadyPipelineStatus = 0;
pub const WGPUCreateReadyPipelineStatus_WGPUCreateReadyPipelineStatus_Error:
    WGPUCreateReadyPipelineStatus = 1;
pub const WGPUCreateReadyPipelineStatus_WGPUCreateReadyPipelineStatus_DeviceLost:
    WGPUCreateReadyPipelineStatus = 2;
pub const WGPUCreateReadyPipelineStatus_WGPUCreateReadyPipelineStatus_DeviceDestroyed:
    WGPUCreateReadyPipelineStatus = 3;
pub const WGPUCreateReadyPipelineStatus_WGPUCreateReadyPipelineStatus_Unknown:
    WGPUCreateReadyPipelineStatus = 4;
pub const WGPUCreateReadyPipelineStatus_WGPUCreateReadyPipelineStatus_Force32:
    WGPUCreateReadyPipelineStatus = 2147483647;
pub type WGPUCreateReadyPipelineStatus = ::std::os::raw::c_uint;
pub const WGPUCullMode_WGPUCullMode_None: WGPUCullMode = 0;
pub const WGPUCullMode_WGPUCullMode_Front: WGPUCullMode = 1;
pub const WGPUCullMode_WGPUCullMode_Back: WGPUCullMode = 2;
pub const WGPUCullMode_WGPUCullMode_Force32: WGPUCullMode = 2147483647;
pub type WGPUCullMode = ::std::os::raw::c_uint;
pub const WGPUErrorFilter_WGPUErrorFilter_None: WGPUErrorFilter = 0;
pub const WGPUErrorFilter_WGPUErrorFilter_Validation: WGPUErrorFilter = 1;
pub const WGPUErrorFilter_WGPUErrorFilter_OutOfMemory: WGPUErrorFilter = 2;
pub const WGPUErrorFilter_WGPUErrorFilter_Force32: WGPUErrorFilter = 2147483647;
pub type WGPUErrorFilter = ::std::os::raw::c_uint;
pub const WGPUErrorType_WGPUErrorType_NoError: WGPUErrorType = 0;
pub const WGPUErrorType_WGPUErrorType_Validation: WGPUErrorType = 1;
pub const WGPUErrorType_WGPUErrorType_OutOfMemory: WGPUErrorType = 2;
pub const WGPUErrorType_WGPUErrorType_Unknown: WGPUErrorType = 3;
pub const WGPUErrorType_WGPUErrorType_DeviceLost: WGPUErrorType = 4;
pub const WGPUErrorType_WGPUErrorType_Force32: WGPUErrorType = 2147483647;
pub type WGPUErrorType = ::std::os::raw::c_uint;
pub const WGPUFilterMode_WGPUFilterMode_Nearest: WGPUFilterMode = 0;
pub const WGPUFilterMode_WGPUFilterMode_Linear: WGPUFilterMode = 1;
pub const WGPUFilterMode_WGPUFilterMode_Force32: WGPUFilterMode = 2147483647;
pub type WGPUFilterMode = ::std::os::raw::c_uint;
pub const WGPUFrontFace_WGPUFrontFace_CCW: WGPUFrontFace = 0;
pub const WGPUFrontFace_WGPUFrontFace_CW: WGPUFrontFace = 1;
pub const WGPUFrontFace_WGPUFrontFace_Force32: WGPUFrontFace = 2147483647;
pub type WGPUFrontFace = ::std::os::raw::c_uint;
pub const WGPUIndexFormat_WGPUIndexFormat_Undefined: WGPUIndexFormat = 0;
pub const WGPUIndexFormat_WGPUIndexFormat_Uint16: WGPUIndexFormat = 1;
pub const WGPUIndexFormat_WGPUIndexFormat_Uint32: WGPUIndexFormat = 2;
pub const WGPUIndexFormat_WGPUIndexFormat_Force32: WGPUIndexFormat = 2147483647;
pub type WGPUIndexFormat = ::std::os::raw::c_uint;
pub const WGPUInputStepMode_WGPUInputStepMode_Vertex: WGPUInputStepMode = 0;
pub const WGPUInputStepMode_WGPUInputStepMode_Instance: WGPUInputStepMode = 1;
pub const WGPUInputStepMode_WGPUInputStepMode_Force32: WGPUInputStepMode = 2147483647;
pub type WGPUInputStepMode = ::std::os::raw::c_uint;
pub const WGPULoadOp_WGPULoadOp_Clear: WGPULoadOp = 0;
pub const WGPULoadOp_WGPULoadOp_Load: WGPULoadOp = 1;
pub const WGPULoadOp_WGPULoadOp_Force32: WGPULoadOp = 2147483647;
pub type WGPULoadOp = ::std::os::raw::c_uint;
pub const WGPUPipelineStatisticName_WGPUPipelineStatisticName_VertexShaderInvocations:
    WGPUPipelineStatisticName = 0;
pub const WGPUPipelineStatisticName_WGPUPipelineStatisticName_ClipperInvocations:
    WGPUPipelineStatisticName = 1;
pub const WGPUPipelineStatisticName_WGPUPipelineStatisticName_ClipperPrimitivesOut:
    WGPUPipelineStatisticName = 2;
pub const WGPUPipelineStatisticName_WGPUPipelineStatisticName_FragmentShaderInvocations:
    WGPUPipelineStatisticName = 3;
pub const WGPUPipelineStatisticName_WGPUPipelineStatisticName_ComputeShaderInvocations:
    WGPUPipelineStatisticName = 4;
pub const WGPUPipelineStatisticName_WGPUPipelineStatisticName_Force32: WGPUPipelineStatisticName =
    2147483647;
pub type WGPUPipelineStatisticName = ::std::os::raw::c_uint;
pub const WGPUPresentMode_WGPUPresentMode_Immediate: WGPUPresentMode = 0;
pub const WGPUPresentMode_WGPUPresentMode_Mailbox: WGPUPresentMode = 1;
pub const WGPUPresentMode_WGPUPresentMode_Fifo: WGPUPresentMode = 2;
pub const WGPUPresentMode_WGPUPresentMode_Force32: WGPUPresentMode = 2147483647;
pub type WGPUPresentMode = ::std::os::raw::c_uint;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_PointList: WGPUPrimitiveTopology = 0;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_LineList: WGPUPrimitiveTopology = 1;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_LineStrip: WGPUPrimitiveTopology = 2;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_TriangleList: WGPUPrimitiveTopology = 3;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_TriangleStrip: WGPUPrimitiveTopology = 4;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_Force32: WGPUPrimitiveTopology = 2147483647;
pub type WGPUPrimitiveTopology = ::std::os::raw::c_uint;
pub const WGPUQueryType_WGPUQueryType_Occlusion: WGPUQueryType = 0;
pub const WGPUQueryType_WGPUQueryType_PipelineStatistics: WGPUQueryType = 1;
pub const WGPUQueryType_WGPUQueryType_Timestamp: WGPUQueryType = 2;
pub const WGPUQueryType_WGPUQueryType_Force32: WGPUQueryType = 2147483647;
pub type WGPUQueryType = ::std::os::raw::c_uint;
pub const WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Success: WGPUQueueWorkDoneStatus = 0;
pub const WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Error: WGPUQueueWorkDoneStatus = 1;
pub const WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Unknown: WGPUQueueWorkDoneStatus = 2;
pub const WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_DeviceLost: WGPUQueueWorkDoneStatus = 3;
pub const WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Force32: WGPUQueueWorkDoneStatus =
    2147483647;
pub type WGPUQueueWorkDoneStatus = ::std::os::raw::c_uint;
pub const WGPUSType_WGPUSType_Invalid: WGPUSType = 0;
pub const WGPUSType_WGPUSType_SurfaceDescriptorFromMetalLayer: WGPUSType = 1;
pub const WGPUSType_WGPUSType_SurfaceDescriptorFromWindowsHWND: WGPUSType = 2;
pub const WGPUSType_WGPUSType_SurfaceDescriptorFromXlib: WGPUSType = 3;
pub const WGPUSType_WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector: WGPUSType = 4;
pub const WGPUSType_WGPUSType_ShaderModuleSPIRVDescriptor: WGPUSType = 5;
pub const WGPUSType_WGPUSType_ShaderModuleWGSLDescriptor: WGPUSType = 6;
pub const WGPUSType_WGPUSType_Force32: WGPUSType = 2147483647;
pub type WGPUSType = ::std::os::raw::c_uint;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_Undefined: WGPUSamplerBindingType = 0;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_Filtering: WGPUSamplerBindingType = 1;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_NonFiltering: WGPUSamplerBindingType = 2;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_Comparison: WGPUSamplerBindingType = 3;
pub const WGPUSamplerBindingType_WGPUSamplerBindingType_Force32: WGPUSamplerBindingType =
    2147483647;
pub type WGPUSamplerBindingType = ::std::os::raw::c_uint;
pub const WGPUStencilOperation_WGPUStencilOperation_Keep: WGPUStencilOperation = 0;
pub const WGPUStencilOperation_WGPUStencilOperation_Zero: WGPUStencilOperation = 1;
pub const WGPUStencilOperation_WGPUStencilOperation_Replace: WGPUStencilOperation = 2;
pub const WGPUStencilOperation_WGPUStencilOperation_Invert: WGPUStencilOperation = 3;
pub const WGPUStencilOperation_WGPUStencilOperation_IncrementClamp: WGPUStencilOperation = 4;
pub const WGPUStencilOperation_WGPUStencilOperation_DecrementClamp: WGPUStencilOperation = 5;
pub const WGPUStencilOperation_WGPUStencilOperation_IncrementWrap: WGPUStencilOperation = 6;
pub const WGPUStencilOperation_WGPUStencilOperation_DecrementWrap: WGPUStencilOperation = 7;
pub const WGPUStencilOperation_WGPUStencilOperation_Force32: WGPUStencilOperation = 2147483647;
pub type WGPUStencilOperation = ::std::os::raw::c_uint;
pub const WGPUStorageTextureAccess_WGPUStorageTextureAccess_Undefined: WGPUStorageTextureAccess = 0;
pub const WGPUStorageTextureAccess_WGPUStorageTextureAccess_ReadOnly: WGPUStorageTextureAccess = 1;
pub const WGPUStorageTextureAccess_WGPUStorageTextureAccess_WriteOnly: WGPUStorageTextureAccess = 2;
pub const WGPUStorageTextureAccess_WGPUStorageTextureAccess_Force32: WGPUStorageTextureAccess =
    2147483647;
pub type WGPUStorageTextureAccess = ::std::os::raw::c_uint;
pub const WGPUStoreOp_WGPUStoreOp_Store: WGPUStoreOp = 0;
pub const WGPUStoreOp_WGPUStoreOp_Clear: WGPUStoreOp = 1;
pub const WGPUStoreOp_WGPUStoreOp_Force32: WGPUStoreOp = 2147483647;
pub type WGPUStoreOp = ::std::os::raw::c_uint;
pub const WGPUTextureAspect_WGPUTextureAspect_All: WGPUTextureAspect = 0;
pub const WGPUTextureAspect_WGPUTextureAspect_StencilOnly: WGPUTextureAspect = 1;
pub const WGPUTextureAspect_WGPUTextureAspect_DepthOnly: WGPUTextureAspect = 2;
pub const WGPUTextureAspect_WGPUTextureAspect_Force32: WGPUTextureAspect = 2147483647;
pub type WGPUTextureAspect = ::std::os::raw::c_uint;
pub const WGPUTextureComponentType_WGPUTextureComponentType_Float: WGPUTextureComponentType = 0;
pub const WGPUTextureComponentType_WGPUTextureComponentType_Sint: WGPUTextureComponentType = 1;
pub const WGPUTextureComponentType_WGPUTextureComponentType_Uint: WGPUTextureComponentType = 2;
pub const WGPUTextureComponentType_WGPUTextureComponentType_DepthComparison:
    WGPUTextureComponentType = 3;
pub const WGPUTextureComponentType_WGPUTextureComponentType_Force32: WGPUTextureComponentType =
    2147483647;
pub type WGPUTextureComponentType = ::std::os::raw::c_uint;
pub const WGPUTextureDimension_WGPUTextureDimension_1D: WGPUTextureDimension = 0;
pub const WGPUTextureDimension_WGPUTextureDimension_2D: WGPUTextureDimension = 1;
pub const WGPUTextureDimension_WGPUTextureDimension_3D: WGPUTextureDimension = 2;
pub const WGPUTextureDimension_WGPUTextureDimension_Force32: WGPUTextureDimension = 2147483647;
pub type WGPUTextureDimension = ::std::os::raw::c_uint;
pub const WGPUTextureFormat_WGPUTextureFormat_Undefined: WGPUTextureFormat = 0;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Unorm: WGPUTextureFormat = 1;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Snorm: WGPUTextureFormat = 2;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Uint: WGPUTextureFormat = 3;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Sint: WGPUTextureFormat = 4;
pub const WGPUTextureFormat_WGPUTextureFormat_R16Uint: WGPUTextureFormat = 5;
pub const WGPUTextureFormat_WGPUTextureFormat_R16Sint: WGPUTextureFormat = 6;
pub const WGPUTextureFormat_WGPUTextureFormat_R16Float: WGPUTextureFormat = 7;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Unorm: WGPUTextureFormat = 8;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Snorm: WGPUTextureFormat = 9;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Uint: WGPUTextureFormat = 10;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Sint: WGPUTextureFormat = 11;
pub const WGPUTextureFormat_WGPUTextureFormat_R32Float: WGPUTextureFormat = 12;
pub const WGPUTextureFormat_WGPUTextureFormat_R32Uint: WGPUTextureFormat = 13;
pub const WGPUTextureFormat_WGPUTextureFormat_R32Sint: WGPUTextureFormat = 14;
pub const WGPUTextureFormat_WGPUTextureFormat_RG16Uint: WGPUTextureFormat = 15;
pub const WGPUTextureFormat_WGPUTextureFormat_RG16Sint: WGPUTextureFormat = 16;
pub const WGPUTextureFormat_WGPUTextureFormat_RG16Float: WGPUTextureFormat = 17;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Unorm: WGPUTextureFormat = 18;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8UnormSrgb: WGPUTextureFormat = 19;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Snorm: WGPUTextureFormat = 20;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Uint: WGPUTextureFormat = 21;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Sint: WGPUTextureFormat = 22;
pub const WGPUTextureFormat_WGPUTextureFormat_BGRA8Unorm: WGPUTextureFormat = 23;
pub const WGPUTextureFormat_WGPUTextureFormat_BGRA8UnormSrgb: WGPUTextureFormat = 24;
pub const WGPUTextureFormat_WGPUTextureFormat_RGB10A2Unorm: WGPUTextureFormat = 25;
pub const WGPUTextureFormat_WGPUTextureFormat_RG11B10Ufloat: WGPUTextureFormat = 26;
pub const WGPUTextureFormat_WGPUTextureFormat_RGB9E5Ufloat: WGPUTextureFormat = 27;
pub const WGPUTextureFormat_WGPUTextureFormat_RG32Float: WGPUTextureFormat = 28;
pub const WGPUTextureFormat_WGPUTextureFormat_RG32Uint: WGPUTextureFormat = 29;
pub const WGPUTextureFormat_WGPUTextureFormat_RG32Sint: WGPUTextureFormat = 30;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA16Uint: WGPUTextureFormat = 31;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA16Sint: WGPUTextureFormat = 32;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA16Float: WGPUTextureFormat = 33;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA32Float: WGPUTextureFormat = 34;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA32Uint: WGPUTextureFormat = 35;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA32Sint: WGPUTextureFormat = 36;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth32Float: WGPUTextureFormat = 37;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth24Plus: WGPUTextureFormat = 38;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth24PlusStencil8: WGPUTextureFormat = 39;
pub const WGPUTextureFormat_WGPUTextureFormat_Stencil8: WGPUTextureFormat = 40;
pub const WGPUTextureFormat_WGPUTextureFormat_BC1RGBAUnorm: WGPUTextureFormat = 41;
pub const WGPUTextureFormat_WGPUTextureFormat_BC1RGBAUnormSrgb: WGPUTextureFormat = 42;
pub const WGPUTextureFormat_WGPUTextureFormat_BC2RGBAUnorm: WGPUTextureFormat = 43;
pub const WGPUTextureFormat_WGPUTextureFormat_BC2RGBAUnormSrgb: WGPUTextureFormat = 44;
pub const WGPUTextureFormat_WGPUTextureFormat_BC3RGBAUnorm: WGPUTextureFormat = 45;
pub const WGPUTextureFormat_WGPUTextureFormat_BC3RGBAUnormSrgb: WGPUTextureFormat = 46;
pub const WGPUTextureFormat_WGPUTextureFormat_BC4RUnorm: WGPUTextureFormat = 47;
pub const WGPUTextureFormat_WGPUTextureFormat_BC4RSnorm: WGPUTextureFormat = 48;
pub const WGPUTextureFormat_WGPUTextureFormat_BC5RGUnorm: WGPUTextureFormat = 49;
pub const WGPUTextureFormat_WGPUTextureFormat_BC5RGSnorm: WGPUTextureFormat = 50;
pub const WGPUTextureFormat_WGPUTextureFormat_BC6HRGBUfloat: WGPUTextureFormat = 51;
pub const WGPUTextureFormat_WGPUTextureFormat_BC6HRGBFloat: WGPUTextureFormat = 52;
pub const WGPUTextureFormat_WGPUTextureFormat_BC7RGBAUnorm: WGPUTextureFormat = 53;
pub const WGPUTextureFormat_WGPUTextureFormat_BC7RGBAUnormSrgb: WGPUTextureFormat = 54;
pub const WGPUTextureFormat_WGPUTextureFormat_Force32: WGPUTextureFormat = 2147483647;
pub type WGPUTextureFormat = ::std::os::raw::c_uint;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Undefined: WGPUTextureSampleType = 0;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Float: WGPUTextureSampleType = 1;
pub const WGPUTextureSampleType_WGPUTextureSampleType_UnfilterableFloat: WGPUTextureSampleType = 2;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Depth: WGPUTextureSampleType = 3;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Sint: WGPUTextureSampleType = 4;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Uint: WGPUTextureSampleType = 5;
pub const WGPUTextureSampleType_WGPUTextureSampleType_Force32: WGPUTextureSampleType = 2147483647;
pub type WGPUTextureSampleType = ::std::os::raw::c_uint;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_Undefined: WGPUTextureViewDimension = 0;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_1D: WGPUTextureViewDimension = 1;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_2D: WGPUTextureViewDimension = 2;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_2DArray: WGPUTextureViewDimension = 3;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_Cube: WGPUTextureViewDimension = 4;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_CubeArray: WGPUTextureViewDimension = 5;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_3D: WGPUTextureViewDimension = 6;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_Force32: WGPUTextureViewDimension =
    2147483647;
pub type WGPUTextureViewDimension = ::std::os::raw::c_uint;
pub const WGPUVertexFormat_WGPUVertexFormat_UChar2: WGPUVertexFormat = 0;
pub const WGPUVertexFormat_WGPUVertexFormat_UChar4: WGPUVertexFormat = 1;
pub const WGPUVertexFormat_WGPUVertexFormat_Char2: WGPUVertexFormat = 2;
pub const WGPUVertexFormat_WGPUVertexFormat_Char4: WGPUVertexFormat = 3;
pub const WGPUVertexFormat_WGPUVertexFormat_UChar2Norm: WGPUVertexFormat = 4;
pub const WGPUVertexFormat_WGPUVertexFormat_UChar4Norm: WGPUVertexFormat = 5;
pub const WGPUVertexFormat_WGPUVertexFormat_Char2Norm: WGPUVertexFormat = 6;
pub const WGPUVertexFormat_WGPUVertexFormat_Char4Norm: WGPUVertexFormat = 7;
pub const WGPUVertexFormat_WGPUVertexFormat_UShort2: WGPUVertexFormat = 8;
pub const WGPUVertexFormat_WGPUVertexFormat_UShort4: WGPUVertexFormat = 9;
pub const WGPUVertexFormat_WGPUVertexFormat_Short2: WGPUVertexFormat = 10;
pub const WGPUVertexFormat_WGPUVertexFormat_Short4: WGPUVertexFormat = 11;
pub const WGPUVertexFormat_WGPUVertexFormat_UShort2Norm: WGPUVertexFormat = 12;
pub const WGPUVertexFormat_WGPUVertexFormat_UShort4Norm: WGPUVertexFormat = 13;
pub const WGPUVertexFormat_WGPUVertexFormat_Short2Norm: WGPUVertexFormat = 14;
pub const WGPUVertexFormat_WGPUVertexFormat_Short4Norm: WGPUVertexFormat = 15;
pub const WGPUVertexFormat_WGPUVertexFormat_Half2: WGPUVertexFormat = 16;
pub const WGPUVertexFormat_WGPUVertexFormat_Half4: WGPUVertexFormat = 17;
pub const WGPUVertexFormat_WGPUVertexFormat_Float: WGPUVertexFormat = 18;
pub const WGPUVertexFormat_WGPUVertexFormat_Float2: WGPUVertexFormat = 19;
pub const WGPUVertexFormat_WGPUVertexFormat_Float3: WGPUVertexFormat = 20;
pub const WGPUVertexFormat_WGPUVertexFormat_Float4: WGPUVertexFormat = 21;
pub const WGPUVertexFormat_WGPUVertexFormat_UInt: WGPUVertexFormat = 22;
pub const WGPUVertexFormat_WGPUVertexFormat_UInt2: WGPUVertexFormat = 23;
pub const WGPUVertexFormat_WGPUVertexFormat_UInt3: WGPUVertexFormat = 24;
pub const WGPUVertexFormat_WGPUVertexFormat_UInt4: WGPUVertexFormat = 25;
pub const WGPUVertexFormat_WGPUVertexFormat_Int: WGPUVertexFormat = 26;
pub const WGPUVertexFormat_WGPUVertexFormat_Int2: WGPUVertexFormat = 27;
pub const WGPUVertexFormat_WGPUVertexFormat_Int3: WGPUVertexFormat = 28;
pub const WGPUVertexFormat_WGPUVertexFormat_Int4: WGPUVertexFormat = 29;
pub const WGPUVertexFormat_WGPUVertexFormat_Force32: WGPUVertexFormat = 2147483647;
pub type WGPUVertexFormat = ::std::os::raw::c_uint;
pub const WGPUBufferUsage_WGPUBufferUsage_None: WGPUBufferUsage = 0;
pub const WGPUBufferUsage_WGPUBufferUsage_MapRead: WGPUBufferUsage = 1;
pub const WGPUBufferUsage_WGPUBufferUsage_MapWrite: WGPUBufferUsage = 2;
pub const WGPUBufferUsage_WGPUBufferUsage_CopySrc: WGPUBufferUsage = 4;
pub const WGPUBufferUsage_WGPUBufferUsage_CopyDst: WGPUBufferUsage = 8;
pub const WGPUBufferUsage_WGPUBufferUsage_Index: WGPUBufferUsage = 16;
pub const WGPUBufferUsage_WGPUBufferUsage_Vertex: WGPUBufferUsage = 32;
pub const WGPUBufferUsage_WGPUBufferUsage_Uniform: WGPUBufferUsage = 64;
pub const WGPUBufferUsage_WGPUBufferUsage_Storage: WGPUBufferUsage = 128;
pub const WGPUBufferUsage_WGPUBufferUsage_Indirect: WGPUBufferUsage = 256;
pub const WGPUBufferUsage_WGPUBufferUsage_QueryResolve: WGPUBufferUsage = 512;
pub const WGPUBufferUsage_WGPUBufferUsage_Force32: WGPUBufferUsage = 2147483647;
pub type WGPUBufferUsage = ::std::os::raw::c_uint;
pub type WGPUBufferUsageFlags = WGPUFlags;
pub const WGPUColorWriteMask_WGPUColorWriteMask_None: WGPUColorWriteMask = 0;
pub const WGPUColorWriteMask_WGPUColorWriteMask_Red: WGPUColorWriteMask = 1;
pub const WGPUColorWriteMask_WGPUColorWriteMask_Green: WGPUColorWriteMask = 2;
pub const WGPUColorWriteMask_WGPUColorWriteMask_Blue: WGPUColorWriteMask = 4;
pub const WGPUColorWriteMask_WGPUColorWriteMask_Alpha: WGPUColorWriteMask = 8;
pub const WGPUColorWriteMask_WGPUColorWriteMask_All: WGPUColorWriteMask = 15;
pub const WGPUColorWriteMask_WGPUColorWriteMask_Force32: WGPUColorWriteMask = 2147483647;
pub type WGPUColorWriteMask = ::std::os::raw::c_uint;
pub type WGPUColorWriteMaskFlags = WGPUFlags;
pub const WGPUMapMode_WGPUMapMode_Read: WGPUMapMode = 1;
pub const WGPUMapMode_WGPUMapMode_Write: WGPUMapMode = 2;
pub const WGPUMapMode_WGPUMapMode_Force32: WGPUMapMode = 2147483647;
pub type WGPUMapMode = ::std::os::raw::c_uint;
pub type WGPUMapModeFlags = WGPUFlags;
pub const WGPUShaderStage_WGPUShaderStage_None: WGPUShaderStage = 0;
pub const WGPUShaderStage_WGPUShaderStage_Vertex: WGPUShaderStage = 1;
pub const WGPUShaderStage_WGPUShaderStage_Fragment: WGPUShaderStage = 2;
pub const WGPUShaderStage_WGPUShaderStage_Compute: WGPUShaderStage = 4;
pub const WGPUShaderStage_WGPUShaderStage_Force32: WGPUShaderStage = 2147483647;
pub type WGPUShaderStage = ::std::os::raw::c_uint;
pub type WGPUShaderStageFlags = WGPUFlags;
pub const WGPUTextureUsage_WGPUTextureUsage_None: WGPUTextureUsage = 0;
pub const WGPUTextureUsage_WGPUTextureUsage_CopySrc: WGPUTextureUsage = 1;
pub const WGPUTextureUsage_WGPUTextureUsage_CopyDst: WGPUTextureUsage = 2;
pub const WGPUTextureUsage_WGPUTextureUsage_Sampled: WGPUTextureUsage = 4;
pub const WGPUTextureUsage_WGPUTextureUsage_Storage: WGPUTextureUsage = 8;
pub const WGPUTextureUsage_WGPUTextureUsage_RenderAttachment: WGPUTextureUsage = 16;
pub const WGPUTextureUsage_WGPUTextureUsage_Force32: WGPUTextureUsage = 2147483647;
pub type WGPUTextureUsage = ::std::os::raw::c_uint;
pub type WGPUTextureUsageFlags = WGPUFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUChainedStruct {
    pub next: *const WGPUChainedStruct,
    pub sType: WGPUSType,
}
#[test]
fn bindgen_test_layout_WGPUChainedStruct() {
    assert_eq!(
        ::std::mem::size_of::<WGPUChainedStruct>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUChainedStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUChainedStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUChainedStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUChainedStruct>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUChainedStruct),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUChainedStruct>())).sType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUChainedStruct),
            "::",
            stringify!(sType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUAdapterProperties {
    pub nextInChain: *const WGPUChainedStruct,
    pub deviceID: u32,
    pub vendorID: u32,
    pub name: *const ::std::os::raw::c_char,
    pub driverDescription: *const ::std::os::raw::c_char,
    pub adapterType: WGPUAdapterType,
    pub backendType: WGPUBackendType,
}
#[test]
fn bindgen_test_layout_WGPUAdapterProperties() {
    assert_eq!(
        ::std::mem::size_of::<WGPUAdapterProperties>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUAdapterProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUAdapterProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUAdapterProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUAdapterProperties>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUAdapterProperties>())).deviceID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(deviceID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUAdapterProperties>())).vendorID as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(vendorID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUAdapterProperties>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUAdapterProperties>())).driverDescription as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(driverDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUAdapterProperties>())).adapterType as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(adapterType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUAdapterProperties>())).backendType as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(backendType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupEntry {
    pub binding: u32,
    pub buffer: WGPUBuffer,
    pub offset: u64,
    pub size: u64,
    pub sampler: WGPUSampler,
    pub textureView: WGPUTextureView,
}
#[test]
fn bindgen_test_layout_WGPUBindGroupEntry() {
    assert_eq!(
        ::std::mem::size_of::<WGPUBindGroupEntry>(),
        48usize,
        concat!("Size of: ", stringify!(WGPUBindGroupEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUBindGroupEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBindGroupEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBindGroupEntry>())).binding as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupEntry),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBindGroupEntry>())).buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupEntry),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBindGroupEntry>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupEntry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBindGroupEntry>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupEntry),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBindGroupEntry>())).sampler as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupEntry),
            "::",
            stringify!(sampler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBindGroupEntry>())).textureView as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupEntry),
            "::",
            stringify!(textureView)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBlendDescriptor {
    pub operation: WGPUBlendOperation,
    pub srcFactor: WGPUBlendFactor,
    pub dstFactor: WGPUBlendFactor,
}
#[test]
fn bindgen_test_layout_WGPUBlendDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUBlendDescriptor>(),
        12usize,
        concat!("Size of: ", stringify!(WGPUBlendDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUBlendDescriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(WGPUBlendDescriptor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBlendDescriptor>())).operation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBlendDescriptor),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBlendDescriptor>())).srcFactor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBlendDescriptor),
            "::",
            stringify!(srcFactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBlendDescriptor>())).dstFactor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBlendDescriptor),
            "::",
            stringify!(dstFactor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferBindingLayout {
    pub nextInChain: *const WGPUChainedStruct,
    pub type_: WGPUBufferBindingType,
    pub hasDynamicOffset: bool,
    pub minBindingSize: u64,
}
#[test]
fn bindgen_test_layout_WGPUBufferBindingLayout() {
    assert_eq!(
        ::std::mem::size_of::<WGPUBufferBindingLayout>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUBufferBindingLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUBufferBindingLayout>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBufferBindingLayout))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBufferBindingLayout>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferBindingLayout),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBufferBindingLayout>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferBindingLayout),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBufferBindingLayout>())).hasDynamicOffset as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferBindingLayout),
            "::",
            stringify!(hasDynamicOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBufferBindingLayout>())).minBindingSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferBindingLayout),
            "::",
            stringify!(minBindingSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub usage: WGPUBufferUsageFlags,
    pub size: u64,
    pub mappedAtCreation: bool,
}
#[test]
fn bindgen_test_layout_WGPUBufferDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUBufferDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUBufferDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUBufferDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBufferDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBufferDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBufferDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBufferDescriptor>())).usage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferDescriptor),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBufferDescriptor>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferDescriptor),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBufferDescriptor>())).mappedAtCreation as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferDescriptor),
            "::",
            stringify!(mappedAtCreation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUColor {
    pub r: f64,
    pub g: f64,
    pub b: f64,
    pub a: f64,
}
#[test]
fn bindgen_test_layout_WGPUColor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUColor>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUColor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUColor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUColor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUColor>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUColor>())).g as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUColor>())).b as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColor),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUColor>())).a as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColor),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandBufferDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WGPUCommandBufferDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUCommandBufferDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUCommandBufferDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUCommandBufferDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUCommandBufferDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUCommandBufferDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCommandBufferDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUCommandBufferDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCommandBufferDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandEncoderDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WGPUCommandEncoderDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUCommandEncoderDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUCommandEncoderDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUCommandEncoderDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUCommandEncoderDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUCommandEncoderDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCommandEncoderDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUCommandEncoderDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCommandEncoderDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePassDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WGPUComputePassDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUComputePassDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUComputePassDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUComputePassDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUComputePassDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUComputePassDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePassDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUComputePassDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePassDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUDeviceDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
}
#[test]
fn bindgen_test_layout_WGPUDeviceDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUDeviceDescriptor>(),
        8usize,
        concat!("Size of: ", stringify!(WGPUDeviceDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUDeviceDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUDeviceDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUDeviceDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDeviceDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUExtent3D {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[test]
fn bindgen_test_layout_WGPUExtent3D() {
    assert_eq!(
        ::std::mem::size_of::<WGPUExtent3D>(),
        12usize,
        concat!("Size of: ", stringify!(WGPUExtent3D))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUExtent3D>(),
        4usize,
        concat!("Alignment of ", stringify!(WGPUExtent3D))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUExtent3D>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUExtent3D),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUExtent3D>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUExtent3D),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUExtent3D>())).depth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUExtent3D),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUInstanceDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
}
#[test]
fn bindgen_test_layout_WGPUInstanceDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUInstanceDescriptor>(),
        8usize,
        concat!("Size of: ", stringify!(WGPUInstanceDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUInstanceDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUInstanceDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUInstanceDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUInstanceDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUOrigin3D {
    pub x: u32,
    pub y: u32,
    pub z: u32,
}
#[test]
fn bindgen_test_layout_WGPUOrigin3D() {
    assert_eq!(
        ::std::mem::size_of::<WGPUOrigin3D>(),
        12usize,
        concat!("Size of: ", stringify!(WGPUOrigin3D))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUOrigin3D>(),
        4usize,
        concat!("Alignment of ", stringify!(WGPUOrigin3D))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUOrigin3D>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUOrigin3D),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUOrigin3D>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUOrigin3D),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUOrigin3D>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUOrigin3D),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUPipelineLayoutDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub bindGroupLayoutCount: u32,
    pub bindGroupLayouts: *const WGPUBindGroupLayout,
}
#[test]
fn bindgen_test_layout_WGPUPipelineLayoutDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUPipelineLayoutDescriptor>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUPipelineLayoutDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUPipelineLayoutDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUPipelineLayoutDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUPipelineLayoutDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUPipelineLayoutDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUPipelineLayoutDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUPipelineLayoutDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUPipelineLayoutDescriptor>())).bindGroupLayoutCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUPipelineLayoutDescriptor),
            "::",
            stringify!(bindGroupLayoutCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUPipelineLayoutDescriptor>())).bindGroupLayouts as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUPipelineLayoutDescriptor),
            "::",
            stringify!(bindGroupLayouts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUProgrammableStageDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub module: WGPUShaderModule,
    pub entryPoint: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WGPUProgrammableStageDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUProgrammableStageDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUProgrammableStageDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUProgrammableStageDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUProgrammableStageDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUProgrammableStageDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUProgrammableStageDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUProgrammableStageDescriptor>())).module as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUProgrammableStageDescriptor),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUProgrammableStageDescriptor>())).entryPoint as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUProgrammableStageDescriptor),
            "::",
            stringify!(entryPoint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUQuerySetDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub type_: WGPUQueryType,
    pub count: u32,
    pub pipelineStatistics: *const WGPUPipelineStatisticName,
    pub pipelineStatisticsCount: u32,
}
#[test]
fn bindgen_test_layout_WGPUQuerySetDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUQuerySetDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUQuerySetDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUQuerySetDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUQuerySetDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUQuerySetDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUQuerySetDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUQuerySetDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUQuerySetDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUQuerySetDescriptor>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUQuerySetDescriptor),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUQuerySetDescriptor>())).count as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUQuerySetDescriptor),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUQuerySetDescriptor>())).pipelineStatistics as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUQuerySetDescriptor),
            "::",
            stringify!(pipelineStatistics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUQuerySetDescriptor>())).pipelineStatisticsCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUQuerySetDescriptor),
            "::",
            stringify!(pipelineStatisticsCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURasterizationStateDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub frontFace: WGPUFrontFace,
    pub cullMode: WGPUCullMode,
    pub depthBias: i32,
    pub depthBiasSlopeScale: f32,
    pub depthBiasClamp: f32,
    pub clampDepth: bool,
}
#[test]
fn bindgen_test_layout_WGPURasterizationStateDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPURasterizationStateDescriptor>(),
        32usize,
        concat!("Size of: ", stringify!(WGPURasterizationStateDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPURasterizationStateDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPURasterizationStateDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURasterizationStateDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURasterizationStateDescriptor>())).frontFace as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(frontFace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURasterizationStateDescriptor>())).cullMode as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(cullMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURasterizationStateDescriptor>())).depthBias as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(depthBias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURasterizationStateDescriptor>())).depthBiasSlopeScale
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(depthBiasSlopeScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURasterizationStateDescriptor>())).depthBiasClamp as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(depthBiasClamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURasterizationStateDescriptor>())).clampDepth as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(clampDepth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WGPURenderBundleDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPURenderBundleDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPURenderBundleDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPURenderBundleDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPURenderBundleDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderBundleDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderBundleDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleEncoderDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub colorFormatsCount: u32,
    pub colorFormats: *const WGPUTextureFormat,
    pub depthStencilFormat: WGPUTextureFormat,
    pub sampleCount: u32,
}
#[test]
fn bindgen_test_layout_WGPURenderBundleEncoderDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPURenderBundleEncoderDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPURenderBundleEncoderDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPURenderBundleEncoderDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPURenderBundleEncoderDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderBundleEncoderDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderBundleEncoderDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderBundleEncoderDescriptor>())).colorFormatsCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(colorFormatsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderBundleEncoderDescriptor>())).colorFormats as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(colorFormats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderBundleEncoderDescriptor>())).depthStencilFormat
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(depthStencilFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderBundleEncoderDescriptor>())).sampleCount as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(sampleCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassDepthStencilAttachmentDescriptor {
    pub attachment: WGPUTextureView,
    pub depthLoadOp: WGPULoadOp,
    pub depthStoreOp: WGPUStoreOp,
    pub clearDepth: f32,
    pub depthReadOnly: bool,
    pub stencilLoadOp: WGPULoadOp,
    pub stencilStoreOp: WGPUStoreOp,
    pub clearStencil: u32,
    pub stencilReadOnly: bool,
}
#[test]
fn bindgen_test_layout_WGPURenderPassDepthStencilAttachmentDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPURenderPassDepthStencilAttachmentDescriptor>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<WGPURenderPassDepthStencilAttachmentDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).attachment
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).depthLoadOp
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(depthLoadOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).depthStoreOp
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(depthStoreOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).clearDepth
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(clearDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).depthReadOnly
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(depthReadOnly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).stencilLoadOp
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(stencilLoadOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>()))
                .stencilStoreOp as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(stencilStoreOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).clearStencil
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(clearStencil)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>()))
                .stencilReadOnly as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(stencilReadOnly)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURequestAdapterOptions {
    pub nextInChain: *const WGPUChainedStruct,
    pub compatibleSurface: WGPUSurface,
}
#[test]
fn bindgen_test_layout_WGPURequestAdapterOptions() {
    assert_eq!(
        ::std::mem::size_of::<WGPURequestAdapterOptions>(),
        16usize,
        concat!("Size of: ", stringify!(WGPURequestAdapterOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPURequestAdapterOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPURequestAdapterOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURequestAdapterOptions>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURequestAdapterOptions),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURequestAdapterOptions>())).compatibleSurface as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURequestAdapterOptions),
            "::",
            stringify!(compatibleSurface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSamplerBindingLayout {
    pub nextInChain: *const WGPUChainedStruct,
    pub type_: WGPUSamplerBindingType,
}
#[test]
fn bindgen_test_layout_WGPUSamplerBindingLayout() {
    assert_eq!(
        ::std::mem::size_of::<WGPUSamplerBindingLayout>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUSamplerBindingLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUSamplerBindingLayout>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUSamplerBindingLayout))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSamplerBindingLayout>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerBindingLayout),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSamplerBindingLayout>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerBindingLayout),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSamplerDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub addressModeU: WGPUAddressMode,
    pub addressModeV: WGPUAddressMode,
    pub addressModeW: WGPUAddressMode,
    pub magFilter: WGPUFilterMode,
    pub minFilter: WGPUFilterMode,
    pub mipmapFilter: WGPUFilterMode,
    pub lodMinClamp: f32,
    pub lodMaxClamp: f32,
    pub compare: WGPUCompareFunction,
    pub maxAnisotropy: u16,
}
#[test]
fn bindgen_test_layout_WGPUSamplerDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUSamplerDescriptor>(),
        56usize,
        concat!("Size of: ", stringify!(WGPUSamplerDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUSamplerDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUSamplerDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).addressModeU as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(addressModeU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).addressModeV as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(addressModeV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).addressModeW as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(addressModeW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).magFilter as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(magFilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).minFilter as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(minFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).mipmapFilter as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(mipmapFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).lodMinClamp as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(lodMinClamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).lodMaxClamp as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(lodMaxClamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).compare as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSamplerDescriptor>())).maxAnisotropy as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(maxAnisotropy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUShaderModuleDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WGPUShaderModuleDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUShaderModuleDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUShaderModuleDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUShaderModuleDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUShaderModuleDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUShaderModuleDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUShaderModuleDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUShaderModuleSPIRVDescriptor {
    pub chain: WGPUChainedStruct,
    pub codeSize: u32,
    pub code: *const u32,
}
#[test]
fn bindgen_test_layout_WGPUShaderModuleSPIRVDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUShaderModuleSPIRVDescriptor>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUShaderModuleSPIRVDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUShaderModuleSPIRVDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUShaderModuleSPIRVDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUShaderModuleSPIRVDescriptor>())).chain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleSPIRVDescriptor),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUShaderModuleSPIRVDescriptor>())).codeSize as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleSPIRVDescriptor),
            "::",
            stringify!(codeSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUShaderModuleSPIRVDescriptor>())).code as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleSPIRVDescriptor),
            "::",
            stringify!(code)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUShaderModuleWGSLDescriptor {
    pub chain: WGPUChainedStruct,
    pub source: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WGPUShaderModuleWGSLDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUShaderModuleWGSLDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUShaderModuleWGSLDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUShaderModuleWGSLDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUShaderModuleWGSLDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUShaderModuleWGSLDescriptor>())).chain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleWGSLDescriptor),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUShaderModuleWGSLDescriptor>())).source as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleWGSLDescriptor),
            "::",
            stringify!(source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUStencilStateFaceDescriptor {
    pub compare: WGPUCompareFunction,
    pub failOp: WGPUStencilOperation,
    pub depthFailOp: WGPUStencilOperation,
    pub passOp: WGPUStencilOperation,
}
#[test]
fn bindgen_test_layout_WGPUStencilStateFaceDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUStencilStateFaceDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUStencilStateFaceDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUStencilStateFaceDescriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(WGPUStencilStateFaceDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUStencilStateFaceDescriptor>())).compare as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStencilStateFaceDescriptor),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUStencilStateFaceDescriptor>())).failOp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStencilStateFaceDescriptor),
            "::",
            stringify!(failOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUStencilStateFaceDescriptor>())).depthFailOp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStencilStateFaceDescriptor),
            "::",
            stringify!(depthFailOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUStencilStateFaceDescriptor>())).passOp as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStencilStateFaceDescriptor),
            "::",
            stringify!(passOp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUStorageTextureBindingLayout {
    pub nextInChain: *const WGPUChainedStruct,
    pub access: WGPUStorageTextureAccess,
    pub format: WGPUTextureFormat,
    pub viewDimension: WGPUTextureViewDimension,
}
#[test]
fn bindgen_test_layout_WGPUStorageTextureBindingLayout() {
    assert_eq!(
        ::std::mem::size_of::<WGPUStorageTextureBindingLayout>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUStorageTextureBindingLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUStorageTextureBindingLayout>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUStorageTextureBindingLayout))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUStorageTextureBindingLayout>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStorageTextureBindingLayout),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUStorageTextureBindingLayout>())).access as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStorageTextureBindingLayout),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUStorageTextureBindingLayout>())).format as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStorageTextureBindingLayout),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUStorageTextureBindingLayout>())).viewDimension as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStorageTextureBindingLayout),
            "::",
            stringify!(viewDimension)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WGPUSurfaceDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUSurfaceDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUSurfaceDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUSurfaceDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUSurfaceDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSurfaceDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptorFromCanvasHTMLSelector {
    pub chain: WGPUChainedStruct,
    pub selector: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WGPUSurfaceDescriptorFromCanvasHTMLSelector() {
    assert_eq!(
        ::std::mem::size_of::<WGPUSurfaceDescriptorFromCanvasHTMLSelector>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(WGPUSurfaceDescriptorFromCanvasHTMLSelector)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUSurfaceDescriptorFromCanvasHTMLSelector>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPUSurfaceDescriptorFromCanvasHTMLSelector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptorFromCanvasHTMLSelector>())).chain
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromCanvasHTMLSelector),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptorFromCanvasHTMLSelector>())).selector
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromCanvasHTMLSelector),
            "::",
            stringify!(selector)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptorFromMetalLayer {
    pub chain: WGPUChainedStruct,
    pub layer: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_WGPUSurfaceDescriptorFromMetalLayer() {
    assert_eq!(
        ::std::mem::size_of::<WGPUSurfaceDescriptorFromMetalLayer>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUSurfaceDescriptorFromMetalLayer))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUSurfaceDescriptorFromMetalLayer>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPUSurfaceDescriptorFromMetalLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptorFromMetalLayer>())).chain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromMetalLayer),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptorFromMetalLayer>())).layer as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromMetalLayer),
            "::",
            stringify!(layer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptorFromWindowsHWND {
    pub chain: WGPUChainedStruct,
    pub hinstance: *mut ::std::os::raw::c_void,
    pub hwnd: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_WGPUSurfaceDescriptorFromWindowsHWND() {
    assert_eq!(
        ::std::mem::size_of::<WGPUSurfaceDescriptorFromWindowsHWND>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(WGPUSurfaceDescriptorFromWindowsHWND)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUSurfaceDescriptorFromWindowsHWND>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPUSurfaceDescriptorFromWindowsHWND)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptorFromWindowsHWND>())).chain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromWindowsHWND),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptorFromWindowsHWND>())).hinstance as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromWindowsHWND),
            "::",
            stringify!(hinstance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptorFromWindowsHWND>())).hwnd as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromWindowsHWND),
            "::",
            stringify!(hwnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptorFromXlib {
    pub chain: WGPUChainedStruct,
    pub display: *mut ::std::os::raw::c_void,
    pub window: u32,
}
#[test]
fn bindgen_test_layout_WGPUSurfaceDescriptorFromXlib() {
    assert_eq!(
        ::std::mem::size_of::<WGPUSurfaceDescriptorFromXlib>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUSurfaceDescriptorFromXlib))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUSurfaceDescriptorFromXlib>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUSurfaceDescriptorFromXlib))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptorFromXlib>())).chain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromXlib),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptorFromXlib>())).display as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromXlib),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSurfaceDescriptorFromXlib>())).window as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromXlib),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSwapChainDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub usage: WGPUTextureUsageFlags,
    pub format: WGPUTextureFormat,
    pub width: u32,
    pub height: u32,
    pub presentMode: WGPUPresentMode,
}
#[test]
fn bindgen_test_layout_WGPUSwapChainDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUSwapChainDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUSwapChainDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUSwapChainDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUSwapChainDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSwapChainDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSwapChainDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSwapChainDescriptor>())).usage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSwapChainDescriptor>())).format as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSwapChainDescriptor>())).width as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUSwapChainDescriptor>())).height as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUSwapChainDescriptor>())).presentMode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(presentMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureBindingLayout {
    pub nextInChain: *const WGPUChainedStruct,
    pub sampleType: WGPUTextureSampleType,
    pub viewDimension: WGPUTextureViewDimension,
    pub multisampled: bool,
}
#[test]
fn bindgen_test_layout_WGPUTextureBindingLayout() {
    assert_eq!(
        ::std::mem::size_of::<WGPUTextureBindingLayout>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUTextureBindingLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUTextureBindingLayout>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUTextureBindingLayout))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureBindingLayout>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureBindingLayout),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureBindingLayout>())).sampleType as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureBindingLayout),
            "::",
            stringify!(sampleType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureBindingLayout>())).viewDimension as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureBindingLayout),
            "::",
            stringify!(viewDimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureBindingLayout>())).multisampled as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureBindingLayout),
            "::",
            stringify!(multisampled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureDataLayout {
    pub nextInChain: *const WGPUChainedStruct,
    pub offset: u64,
    pub bytesPerRow: u32,
    pub rowsPerImage: u32,
}
#[test]
fn bindgen_test_layout_WGPUTextureDataLayout() {
    assert_eq!(
        ::std::mem::size_of::<WGPUTextureDataLayout>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUTextureDataLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUTextureDataLayout>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUTextureDataLayout))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureDataLayout>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDataLayout),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureDataLayout>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDataLayout),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureDataLayout>())).bytesPerRow as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDataLayout),
            "::",
            stringify!(bytesPerRow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureDataLayout>())).rowsPerImage as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDataLayout),
            "::",
            stringify!(rowsPerImage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureViewDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub format: WGPUTextureFormat,
    pub dimension: WGPUTextureViewDimension,
    pub baseMipLevel: u32,
    pub mipLevelCount: u32,
    pub baseArrayLayer: u32,
    pub arrayLayerCount: u32,
    pub aspect: WGPUTextureAspect,
}
#[test]
fn bindgen_test_layout_WGPUTextureViewDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUTextureViewDescriptor>(),
        48usize,
        concat!("Size of: ", stringify!(WGPUTextureViewDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUTextureViewDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUTextureViewDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureViewDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureViewDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureViewDescriptor>())).format as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureViewDescriptor>())).dimension as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureViewDescriptor>())).baseMipLevel as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(baseMipLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureViewDescriptor>())).mipLevelCount as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(mipLevelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureViewDescriptor>())).baseArrayLayer as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(baseArrayLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureViewDescriptor>())).arrayLayerCount as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(arrayLayerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureViewDescriptor>())).aspect as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(aspect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUVertexAttributeDescriptor {
    pub format: WGPUVertexFormat,
    pub offset: u64,
    pub shaderLocation: u32,
}
#[test]
fn bindgen_test_layout_WGPUVertexAttributeDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUVertexAttributeDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUVertexAttributeDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUVertexAttributeDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUVertexAttributeDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexAttributeDescriptor>())).format as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexAttributeDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexAttributeDescriptor>())).offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexAttributeDescriptor),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexAttributeDescriptor>())).shaderLocation as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexAttributeDescriptor),
            "::",
            stringify!(shaderLocation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub layout: WGPUBindGroupLayout,
    pub entryCount: u32,
    pub entries: *const WGPUBindGroupEntry,
}
#[test]
fn bindgen_test_layout_WGPUBindGroupDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUBindGroupDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUBindGroupDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUBindGroupDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBindGroupDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBindGroupDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBindGroupDescriptor>())).layout as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupDescriptor),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupDescriptor>())).entryCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupDescriptor),
            "::",
            stringify!(entryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBindGroupDescriptor>())).entries as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupDescriptor),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupLayoutEntry {
    pub nextInChain: *const WGPUChainedStruct,
    pub binding: u32,
    pub visibility: WGPUShaderStageFlags,
    pub buffer: WGPUBufferBindingLayout,
    pub sampler: WGPUSamplerBindingLayout,
    pub texture: WGPUTextureBindingLayout,
    pub storageTexture: WGPUStorageTextureBindingLayout,
}
#[test]
fn bindgen_test_layout_WGPUBindGroupLayoutEntry() {
    assert_eq!(
        ::std::mem::size_of::<WGPUBindGroupLayoutEntry>(),
        104usize,
        concat!("Size of: ", stringify!(WGPUBindGroupLayoutEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUBindGroupLayoutEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBindGroupLayoutEntry))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupLayoutEntry>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutEntry),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupLayoutEntry>())).binding as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutEntry),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupLayoutEntry>())).visibility as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutEntry),
            "::",
            stringify!(visibility)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBindGroupLayoutEntry>())).buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutEntry),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupLayoutEntry>())).sampler as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutEntry),
            "::",
            stringify!(sampler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupLayoutEntry>())).texture as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutEntry),
            "::",
            stringify!(texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupLayoutEntry>())).storageTexture as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutEntry),
            "::",
            stringify!(storageTexture)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferCopyView {
    pub nextInChain: *const WGPUChainedStruct,
    pub layout: WGPUTextureDataLayout,
    pub buffer: WGPUBuffer,
}
#[test]
fn bindgen_test_layout_WGPUBufferCopyView() {
    assert_eq!(
        ::std::mem::size_of::<WGPUBufferCopyView>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUBufferCopyView))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUBufferCopyView>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBufferCopyView))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBufferCopyView>())).nextInChain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferCopyView),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBufferCopyView>())).layout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferCopyView),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUBufferCopyView>())).buffer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferCopyView),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUColorStateDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub format: WGPUTextureFormat,
    pub alphaBlend: WGPUBlendDescriptor,
    pub colorBlend: WGPUBlendDescriptor,
    pub writeMask: WGPUColorWriteMaskFlags,
}
#[test]
fn bindgen_test_layout_WGPUColorStateDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUColorStateDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUColorStateDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUColorStateDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUColorStateDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUColorStateDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColorStateDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUColorStateDescriptor>())).format as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColorStateDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUColorStateDescriptor>())).alphaBlend as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColorStateDescriptor),
            "::",
            stringify!(alphaBlend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUColorStateDescriptor>())).colorBlend as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColorStateDescriptor),
            "::",
            stringify!(colorBlend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUColorStateDescriptor>())).writeMask as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColorStateDescriptor),
            "::",
            stringify!(writeMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePipelineDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub layout: WGPUPipelineLayout,
    pub computeStage: WGPUProgrammableStageDescriptor,
}
#[test]
fn bindgen_test_layout_WGPUComputePipelineDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUComputePipelineDescriptor>(),
        48usize,
        concat!("Size of: ", stringify!(WGPUComputePipelineDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUComputePipelineDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUComputePipelineDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUComputePipelineDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePipelineDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUComputePipelineDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePipelineDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUComputePipelineDescriptor>())).layout as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePipelineDescriptor),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUComputePipelineDescriptor>())).computeStage as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePipelineDescriptor),
            "::",
            stringify!(computeStage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUDepthStencilStateDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub format: WGPUTextureFormat,
    pub depthWriteEnabled: bool,
    pub depthCompare: WGPUCompareFunction,
    pub stencilFront: WGPUStencilStateFaceDescriptor,
    pub stencilBack: WGPUStencilStateFaceDescriptor,
    pub stencilReadMask: u32,
    pub stencilWriteMask: u32,
}
#[test]
fn bindgen_test_layout_WGPUDepthStencilStateDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUDepthStencilStateDescriptor>(),
        64usize,
        concat!("Size of: ", stringify!(WGPUDepthStencilStateDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUDepthStencilStateDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUDepthStencilStateDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUDepthStencilStateDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUDepthStencilStateDescriptor>())).format as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUDepthStencilStateDescriptor>())).depthWriteEnabled
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(depthWriteEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUDepthStencilStateDescriptor>())).depthCompare as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(depthCompare)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUDepthStencilStateDescriptor>())).stencilFront as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(stencilFront)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUDepthStencilStateDescriptor>())).stencilBack as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(stencilBack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUDepthStencilStateDescriptor>())).stencilReadMask as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(stencilReadMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUDepthStencilStateDescriptor>())).stencilWriteMask as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(stencilWriteMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassColorAttachmentDescriptor {
    pub attachment: WGPUTextureView,
    pub resolveTarget: WGPUTextureView,
    pub loadOp: WGPULoadOp,
    pub storeOp: WGPUStoreOp,
    pub clearColor: WGPUColor,
}
#[test]
fn bindgen_test_layout_WGPURenderPassColorAttachmentDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPURenderPassColorAttachmentDescriptor>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<WGPURenderPassColorAttachmentDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPURenderPassColorAttachmentDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassColorAttachmentDescriptor>())).attachment
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassColorAttachmentDescriptor>())).resolveTarget
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor),
            "::",
            stringify!(resolveTarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassColorAttachmentDescriptor>())).loadOp as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor),
            "::",
            stringify!(loadOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassColorAttachmentDescriptor>())).storeOp as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor),
            "::",
            stringify!(storeOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassColorAttachmentDescriptor>())).clearColor
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor),
            "::",
            stringify!(clearColor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureCopyView {
    pub nextInChain: *const WGPUChainedStruct,
    pub texture: WGPUTexture,
    pub mipLevel: u32,
    pub origin: WGPUOrigin3D,
    pub aspect: WGPUTextureAspect,
}
#[test]
fn bindgen_test_layout_WGPUTextureCopyView() {
    assert_eq!(
        ::std::mem::size_of::<WGPUTextureCopyView>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUTextureCopyView))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUTextureCopyView>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUTextureCopyView))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureCopyView>())).nextInChain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureCopyView),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureCopyView>())).texture as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureCopyView),
            "::",
            stringify!(texture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureCopyView>())).mipLevel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureCopyView),
            "::",
            stringify!(mipLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureCopyView>())).origin as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureCopyView),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureCopyView>())).aspect as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureCopyView),
            "::",
            stringify!(aspect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub usage: WGPUTextureUsageFlags,
    pub dimension: WGPUTextureDimension,
    pub size: WGPUExtent3D,
    pub format: WGPUTextureFormat,
    pub mipLevelCount: u32,
    pub sampleCount: u32,
}
#[test]
fn bindgen_test_layout_WGPUTextureDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUTextureDescriptor>(),
        48usize,
        concat!("Size of: ", stringify!(WGPUTextureDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUTextureDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUTextureDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureDescriptor>())).usage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureDescriptor>())).dimension as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureDescriptor>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPUTextureDescriptor>())).format as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureDescriptor>())).mipLevelCount as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(mipLevelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUTextureDescriptor>())).sampleCount as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(sampleCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUVertexBufferLayoutDescriptor {
    pub arrayStride: u64,
    pub stepMode: WGPUInputStepMode,
    pub attributeCount: u32,
    pub attributes: *const WGPUVertexAttributeDescriptor,
}
#[test]
fn bindgen_test_layout_WGPUVertexBufferLayoutDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUVertexBufferLayoutDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUVertexBufferLayoutDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUVertexBufferLayoutDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPUVertexBufferLayoutDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexBufferLayoutDescriptor>())).arrayStride as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexBufferLayoutDescriptor),
            "::",
            stringify!(arrayStride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexBufferLayoutDescriptor>())).stepMode as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexBufferLayoutDescriptor),
            "::",
            stringify!(stepMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexBufferLayoutDescriptor>())).attributeCount as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexBufferLayoutDescriptor),
            "::",
            stringify!(attributeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexBufferLayoutDescriptor>())).attributes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexBufferLayoutDescriptor),
            "::",
            stringify!(attributes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupLayoutDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub entryCount: u32,
    pub entries: *const WGPUBindGroupLayoutEntry,
}
#[test]
fn bindgen_test_layout_WGPUBindGroupLayoutDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUBindGroupLayoutDescriptor>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUBindGroupLayoutDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUBindGroupLayoutDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBindGroupLayoutDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupLayoutDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupLayoutDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupLayoutDescriptor>())).entryCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutDescriptor),
            "::",
            stringify!(entryCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUBindGroupLayoutDescriptor>())).entries as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutDescriptor),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub colorAttachmentCount: u32,
    pub colorAttachments: *const WGPURenderPassColorAttachmentDescriptor,
    pub depthStencilAttachment: *const WGPURenderPassDepthStencilAttachmentDescriptor,
    pub occlusionQuerySet: WGPUQuerySet,
}
#[test]
fn bindgen_test_layout_WGPURenderPassDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPURenderPassDescriptor>(),
        48usize,
        concat!("Size of: ", stringify!(WGPURenderPassDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPURenderPassDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPURenderPassDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WGPURenderPassDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDescriptor>())).colorAttachmentCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(colorAttachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDescriptor>())).colorAttachments as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(colorAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDescriptor>())).depthStencilAttachment as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(depthStencilAttachment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPassDescriptor>())).occlusionQuerySet as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(occlusionQuerySet)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUVertexStateDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub indexFormat: WGPUIndexFormat,
    pub vertexBufferCount: u32,
    pub vertexBuffers: *const WGPUVertexBufferLayoutDescriptor,
}
#[test]
fn bindgen_test_layout_WGPUVertexStateDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPUVertexStateDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUVertexStateDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPUVertexStateDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUVertexStateDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexStateDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexStateDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexStateDescriptor>())).indexFormat as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexStateDescriptor),
            "::",
            stringify!(indexFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexStateDescriptor>())).vertexBufferCount as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexStateDescriptor),
            "::",
            stringify!(vertexBufferCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPUVertexStateDescriptor>())).vertexBuffers as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexStateDescriptor),
            "::",
            stringify!(vertexBuffers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPipelineDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::std::os::raw::c_char,
    pub layout: WGPUPipelineLayout,
    pub vertexStage: WGPUProgrammableStageDescriptor,
    pub fragmentStage: *const WGPUProgrammableStageDescriptor,
    pub vertexState: *const WGPUVertexStateDescriptor,
    pub primitiveTopology: WGPUPrimitiveTopology,
    pub rasterizationState: *const WGPURasterizationStateDescriptor,
    pub sampleCount: u32,
    pub depthStencilState: *const WGPUDepthStencilStateDescriptor,
    pub colorStateCount: u32,
    pub colorStates: *const WGPUColorStateDescriptor,
    pub sampleMask: u32,
    pub alphaToCoverageEnabled: bool,
}
#[test]
fn bindgen_test_layout_WGPURenderPipelineDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<WGPURenderPipelineDescriptor>(),
        120usize,
        concat!("Size of: ", stringify!(WGPURenderPipelineDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<WGPURenderPipelineDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPURenderPipelineDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).layout as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).vertexStage as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(vertexStage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).fragmentStage as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(fragmentStage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).vertexState as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(vertexState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).primitiveTopology as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(primitiveTopology)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).rasterizationState as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(rasterizationState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).sampleCount as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(sampleCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).depthStencilState as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(depthStencilState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).colorStateCount as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(colorStateCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).colorStates as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(colorStates)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).sampleMask as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(sampleMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WGPURenderPipelineDescriptor>())).alphaToCoverageEnabled
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(alphaToCoverageEnabled)
        )
    );
}
pub type WGPUBufferMapCallback = ::std::option::Option<
    unsafe extern "C" fn(status: WGPUBufferMapAsyncStatus, userdata: *mut ::std::os::raw::c_void),
>;
pub type WGPUCreateReadyComputePipelineCallback = ::std::option::Option<
    unsafe extern "C" fn(
        status: WGPUCreateReadyPipelineStatus,
        pipeline: WGPUComputePipeline,
        message: *const ::std::os::raw::c_char,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUCreateReadyRenderPipelineCallback = ::std::option::Option<
    unsafe extern "C" fn(
        status: WGPUCreateReadyPipelineStatus,
        pipeline: WGPURenderPipeline,
        message: *const ::std::os::raw::c_char,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUDeviceLostCallback = ::std::option::Option<
    unsafe extern "C" fn(
        message: *const ::std::os::raw::c_char,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUErrorCallback = ::std::option::Option<
    unsafe extern "C" fn(
        type_: WGPUErrorType,
        message: *const ::std::os::raw::c_char,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUQueueWorkDoneCallback = ::std::option::Option<
    unsafe extern "C" fn(status: WGPUQueueWorkDoneStatus, userdata: *mut ::std::os::raw::c_void),
>;
pub type WGPURequestAdapterCallback = ::std::option::Option<
    unsafe extern "C" fn(result: WGPUAdapter, userdata: *mut ::std::os::raw::c_void),
>;
pub type WGPURequestDeviceCallback = ::std::option::Option<
    unsafe extern "C" fn(result: WGPUDevice, userdata: *mut ::std::os::raw::c_void),
>;
pub type WGPUSurfaceGetPreferredFormatCallback = ::std::option::Option<
    unsafe extern "C" fn(format: WGPUTextureFormat, userdata: *mut ::std::os::raw::c_void),
>;
pub type WGPUProc = ::std::option::Option<unsafe extern "C" fn()>;
pub type WGPUProcCreateInstance = ::std::option::Option<
    unsafe extern "C" fn(descriptor: *const WGPUInstanceDescriptor) -> WGPUInstance,
>;
pub type WGPUProcGetProcAddress = ::std::option::Option<
    unsafe extern "C" fn(device: WGPUDevice, procName: *const ::std::os::raw::c_char) -> WGPUProc,
>;
pub type WGPUProcAdapterGetProperties = ::std::option::Option<
    unsafe extern "C" fn(adapter: WGPUAdapter, properties: *mut WGPUAdapterProperties),
>;
pub type WGPUProcAdapterRequestDevice = ::std::option::Option<
    unsafe extern "C" fn(
        adapter: WGPUAdapter,
        descriptor: *const WGPUDeviceDescriptor,
        callback: WGPURequestDeviceCallback,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUProcBufferDestroy = ::std::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer)>;
pub type WGPUProcBufferGetConstMappedRange = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: WGPUBuffer,
        offset: size_t,
        size: size_t,
    ) -> *const ::std::os::raw::c_void,
>;
pub type WGPUProcBufferGetMappedRange = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: WGPUBuffer,
        offset: size_t,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type WGPUProcBufferMapAsync = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: WGPUBuffer,
        mode: WGPUMapModeFlags,
        offset: size_t,
        size: size_t,
        callback: WGPUBufferMapCallback,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUProcBufferUnmap = ::std::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer)>;
pub type WGPUProcCommandEncoderBeginComputePass = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPUComputePassDescriptor,
    ) -> WGPUComputePassEncoder,
>;
pub type WGPUProcCommandEncoderBeginRenderPass = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPURenderPassDescriptor,
    ) -> WGPURenderPassEncoder,
>;
pub type WGPUProcCommandEncoderCopyBufferToBuffer = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: WGPUBuffer,
        sourceOffset: u64,
        destination: WGPUBuffer,
        destinationOffset: u64,
        size: u64,
    ),
>;
pub type WGPUProcCommandEncoderCopyBufferToTexture = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUBufferCopyView,
        destination: *const WGPUTextureCopyView,
        copySize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcCommandEncoderCopyTextureToBuffer = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTextureCopyView,
        destination: *const WGPUBufferCopyView,
        copySize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcCommandEncoderCopyTextureToTexture = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTextureCopyView,
        destination: *const WGPUTextureCopyView,
        copySize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcCommandEncoderFinish = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPUCommandBufferDescriptor,
    ) -> WGPUCommandBuffer,
>;
pub type WGPUProcCommandEncoderInsertDebugMarker = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        markerLabel: *const ::std::os::raw::c_char,
    ),
>;
pub type WGPUProcCommandEncoderPopDebugGroup =
    ::std::option::Option<unsafe extern "C" fn(commandEncoder: WGPUCommandEncoder)>;
pub type WGPUProcCommandEncoderPushDebugGroup = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        groupLabel: *const ::std::os::raw::c_char,
    ),
>;
pub type WGPUProcCommandEncoderResolveQuerySet = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        querySet: WGPUQuerySet,
        firstQuery: u32,
        queryCount: u32,
        destination: WGPUBuffer,
        destinationOffset: u64,
    ),
>;
pub type WGPUProcCommandEncoderWriteTimestamp = ::std::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        querySet: WGPUQuerySet,
        queryIndex: u32,
    ),
>;
pub type WGPUProcComputePassEncoderBeginPipelineStatisticsQuery = ::std::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        querySet: WGPUQuerySet,
        queryIndex: u32,
    ),
>;
pub type WGPUProcComputePassEncoderDispatch = ::std::option::Option<
    unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder, x: u32, y: u32, z: u32),
>;
pub type WGPUProcComputePassEncoderDispatchIndirect = ::std::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcComputePassEncoderEndPass =
    ::std::option::Option<unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder)>;
pub type WGPUProcComputePassEncoderEndPipelineStatisticsQuery =
    ::std::option::Option<unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder)>;
pub type WGPUProcComputePassEncoderInsertDebugMarker = ::std::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        markerLabel: *const ::std::os::raw::c_char,
    ),
>;
pub type WGPUProcComputePassEncoderPopDebugGroup =
    ::std::option::Option<unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder)>;
pub type WGPUProcComputePassEncoderPushDebugGroup = ::std::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        groupLabel: *const ::std::os::raw::c_char,
    ),
>;
pub type WGPUProcComputePassEncoderSetBindGroup = ::std::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: u32,
        dynamicOffsets: *const u32,
    ),
>;
pub type WGPUProcComputePassEncoderSetPipeline = ::std::option::Option<
    unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder, pipeline: WGPUComputePipeline),
>;
pub type WGPUProcComputePassEncoderWriteTimestamp = ::std::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        querySet: WGPUQuerySet,
        queryIndex: u32,
    ),
>;
pub type WGPUProcComputePipelineGetBindGroupLayout = ::std::option::Option<
    unsafe extern "C" fn(
        computePipeline: WGPUComputePipeline,
        groupIndex: u32,
    ) -> WGPUBindGroupLayout,
>;
pub type WGPUProcDeviceCreateBindGroup = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUBindGroupDescriptor,
    ) -> WGPUBindGroup,
>;
pub type WGPUProcDeviceCreateBindGroupLayout = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUBindGroupLayoutDescriptor,
    ) -> WGPUBindGroupLayout,
>;
pub type WGPUProcDeviceCreateBuffer = ::std::option::Option<
    unsafe extern "C" fn(device: WGPUDevice, descriptor: *const WGPUBufferDescriptor) -> WGPUBuffer,
>;
pub type WGPUProcDeviceCreateCommandEncoder = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUCommandEncoderDescriptor,
    ) -> WGPUCommandEncoder,
>;
pub type WGPUProcDeviceCreateComputePipeline = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUComputePipelineDescriptor,
    ) -> WGPUComputePipeline,
>;
pub type WGPUProcDeviceCreatePipelineLayout = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUPipelineLayoutDescriptor,
    ) -> WGPUPipelineLayout,
>;
pub type WGPUProcDeviceCreateQuerySet = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUQuerySetDescriptor,
    ) -> WGPUQuerySet,
>;
pub type WGPUProcDeviceCreateReadyComputePipeline = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUComputePipelineDescriptor,
        callback: WGPUCreateReadyComputePipelineCallback,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUProcDeviceCreateReadyRenderPipeline = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPURenderPipelineDescriptor,
        callback: WGPUCreateReadyRenderPipelineCallback,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUProcDeviceCreateRenderBundleEncoder = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPURenderBundleEncoderDescriptor,
    ) -> WGPURenderBundleEncoder,
>;
pub type WGPUProcDeviceCreateRenderPipeline = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPURenderPipelineDescriptor,
    ) -> WGPURenderPipeline,
>;
pub type WGPUProcDeviceCreateSampler = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUSamplerDescriptor,
    ) -> WGPUSampler,
>;
pub type WGPUProcDeviceCreateShaderModule = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUShaderModuleDescriptor,
    ) -> WGPUShaderModule,
>;
pub type WGPUProcDeviceCreateSwapChain = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        surface: WGPUSurface,
        descriptor: *const WGPUSwapChainDescriptor,
    ) -> WGPUSwapChain,
>;
pub type WGPUProcDeviceCreateTexture = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUTextureDescriptor,
    ) -> WGPUTexture,
>;
pub type WGPUProcDeviceGetDefaultQueue =
    ::std::option::Option<unsafe extern "C" fn(device: WGPUDevice) -> WGPUQueue>;
pub type WGPUProcDevicePopErrorScope = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        callback: WGPUErrorCallback,
        userdata: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub type WGPUProcDevicePushErrorScope =
    ::std::option::Option<unsafe extern "C" fn(device: WGPUDevice, filter: WGPUErrorFilter)>;
pub type WGPUProcDeviceSetDeviceLostCallback = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        callback: WGPUDeviceLostCallback,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUProcDeviceSetUncapturedErrorCallback = ::std::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        callback: WGPUErrorCallback,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUProcInstanceCreateSurface = ::std::option::Option<
    unsafe extern "C" fn(
        instance: WGPUInstance,
        descriptor: *const WGPUSurfaceDescriptor,
    ) -> WGPUSurface,
>;
pub type WGPUProcInstanceProcessEvents =
    ::std::option::Option<unsafe extern "C" fn(instance: WGPUInstance)>;
pub type WGPUProcInstanceRequestAdapter = ::std::option::Option<
    unsafe extern "C" fn(
        instance: WGPUInstance,
        options: *const WGPURequestAdapterOptions,
        callback: WGPURequestAdapterCallback,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUProcQuerySetDestroy =
    ::std::option::Option<unsafe extern "C" fn(querySet: WGPUQuerySet)>;
pub type WGPUProcQueueOnSubmittedWorkDone = ::std::option::Option<
    unsafe extern "C" fn(
        queue: WGPUQueue,
        signalValue: u64,
        callback: WGPUQueueWorkDoneCallback,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUProcQueueSubmit = ::std::option::Option<
    unsafe extern "C" fn(queue: WGPUQueue, commandCount: u32, commands: *const WGPUCommandBuffer),
>;
pub type WGPUProcQueueWriteBuffer = ::std::option::Option<
    unsafe extern "C" fn(
        queue: WGPUQueue,
        buffer: WGPUBuffer,
        bufferOffset: u64,
        data: *const ::std::os::raw::c_void,
        size: size_t,
    ),
>;
pub type WGPUProcQueueWriteTexture = ::std::option::Option<
    unsafe extern "C" fn(
        queue: WGPUQueue,
        destination: *const WGPUTextureCopyView,
        data: *const ::std::os::raw::c_void,
        dataSize: size_t,
        dataLayout: *const WGPUTextureDataLayout,
        writeSize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcRenderBundleEncoderDraw = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderBundleEncoderDrawIndexed = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        baseVertex: i32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderBundleEncoderDrawIndexedIndirect = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderBundleEncoderDrawIndirect = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderBundleEncoderFinish = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        descriptor: *const WGPURenderBundleDescriptor,
    ) -> WGPURenderBundle,
>;
pub type WGPUProcRenderBundleEncoderInsertDebugMarker = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        markerLabel: *const ::std::os::raw::c_char,
    ),
>;
pub type WGPUProcRenderBundleEncoderPopDebugGroup =
    ::std::option::Option<unsafe extern "C" fn(renderBundleEncoder: WGPURenderBundleEncoder)>;
pub type WGPUProcRenderBundleEncoderPushDebugGroup = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupLabel: *const ::std::os::raw::c_char,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetBindGroup = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: u32,
        dynamicOffsets: *const u32,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetIndexBuffer = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        buffer: WGPUBuffer,
        format: WGPUIndexFormat,
        offset: u64,
        size: u64,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetPipeline = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        pipeline: WGPURenderPipeline,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetVertexBuffer = ::std::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        slot: u32,
        buffer: WGPUBuffer,
        offset: u64,
        size: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderBeginOcclusionQuery = ::std::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, queryIndex: u32),
>;
pub type WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        querySet: WGPUQuerySet,
        queryIndex: u32,
    ),
>;
pub type WGPUProcRenderPassEncoderDraw = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderPassEncoderDrawIndexed = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        baseVertex: i32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderPassEncoderDrawIndexedIndirect = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderDrawIndirect = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderEndOcclusionQuery =
    ::std::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPassEncoderEndPass =
    ::std::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPassEncoderEndPipelineStatisticsQuery =
    ::std::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPassEncoderExecuteBundles = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        bundlesCount: u32,
        bundles: *const WGPURenderBundle,
    ),
>;
pub type WGPUProcRenderPassEncoderInsertDebugMarker = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        markerLabel: *const ::std::os::raw::c_char,
    ),
>;
pub type WGPUProcRenderPassEncoderPopDebugGroup =
    ::std::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPassEncoderPushDebugGroup = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        groupLabel: *const ::std::os::raw::c_char,
    ),
>;
pub type WGPUProcRenderPassEncoderSetBindGroup = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: u32,
        dynamicOffsets: *const u32,
    ),
>;
pub type WGPUProcRenderPassEncoderSetBlendColor = ::std::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, color: *const WGPUColor),
>;
pub type WGPUProcRenderPassEncoderSetIndexBuffer = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        buffer: WGPUBuffer,
        format: WGPUIndexFormat,
        offset: u64,
        size: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderSetPipeline = ::std::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, pipeline: WGPURenderPipeline),
>;
pub type WGPUProcRenderPassEncoderSetScissorRect = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
    ),
>;
pub type WGPUProcRenderPassEncoderSetStencilReference = ::std::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, reference: u32),
>;
pub type WGPUProcRenderPassEncoderSetVertexBuffer = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        slot: u32,
        buffer: WGPUBuffer,
        offset: u64,
        size: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderSetViewport = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        x: f32,
        y: f32,
        width: f32,
        height: f32,
        minDepth: f32,
        maxDepth: f32,
    ),
>;
pub type WGPUProcRenderPassEncoderWriteTimestamp = ::std::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        querySet: WGPUQuerySet,
        queryIndex: u32,
    ),
>;
pub type WGPUProcRenderPipelineGetBindGroupLayout = ::std::option::Option<
    unsafe extern "C" fn(
        renderPipeline: WGPURenderPipeline,
        groupIndex: u32,
    ) -> WGPUBindGroupLayout,
>;
pub type WGPUProcSurfaceGetPreferredFormat = ::std::option::Option<
    unsafe extern "C" fn(
        surface: WGPUSurface,
        adapter: WGPUAdapter,
        callback: WGPUSurfaceGetPreferredFormatCallback,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type WGPUProcSwapChainGetCurrentTextureView =
    ::std::option::Option<unsafe extern "C" fn(swapChain: WGPUSwapChain) -> WGPUTextureView>;
pub type WGPUProcSwapChainPresent =
    ::std::option::Option<unsafe extern "C" fn(swapChain: WGPUSwapChain)>;
pub type WGPUProcTextureCreateView = ::std::option::Option<
    unsafe extern "C" fn(
        texture: WGPUTexture,
        descriptor: *const WGPUTextureViewDescriptor,
    ) -> WGPUTextureView,
>;
pub type WGPUProcTextureDestroy = ::std::option::Option<unsafe extern "C" fn(texture: WGPUTexture)>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
