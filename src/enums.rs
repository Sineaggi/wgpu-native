use std::convert::TryInto;

#[repr(C)]
pub enum TextureFormat {
    Undefined = 0x00000000,
    R8Unorm = 0x00000001,
    R8Snorm = 0x00000002,
    R8Uint = 0x00000003,
    R8Sint = 0x00000004,
    R16Uint = 0x00000005,
    R16Sint = 0x00000006,
    R16Float = 0x00000007,
    RG8Unorm = 0x00000008,
    RG8Snorm = 0x00000009,
    RG8Uint = 0x0000000A,
    RG8Sint = 0x0000000B,
    R32Float = 0x0000000C,
    R32Uint = 0x0000000D,
    R32Sint = 0x0000000E,
    RG16Uint = 0x0000000F,
    RG16Sint = 0x00000010,
    RG16Float = 0x00000011,
    RGBA8Unorm = 0x00000012,
    RGBA8UnormSrgb = 0x00000013,
    RGBA8Snorm = 0x00000014,
    RGBA8Uint = 0x00000015,
    RGBA8Sint = 0x00000016,
    BGRA8Unorm = 0x00000017,
    BGRA8UnormSrgb = 0x00000018,
    RGB10A2Unorm = 0x00000019,
    RG11B10Ufloat = 0x0000001A,
    RGB9E5Ufloat = 0x0000001B,
    RG32Float = 0x0000001C,
    RG32Uint = 0x0000001D,
    RG32Sint = 0x0000001E,
    RGBA16Uint = 0x0000001F,
    RGBA16Sint = 0x00000020,
    RGBA16Float = 0x00000021,
    RGBA32Float = 0x00000022,
    RGBA32Uint = 0x00000023,
    RGBA32Sint = 0x00000024,
    Depth32Float = 0x00000025,
    Depth24Plus = 0x00000026,
    Depth24PlusStencil8 = 0x00000027,
    Stencil8 = 0x00000028,
    BC1RGBAUnorm = 0x00000029,
    BC1RGBAUnormSrgb = 0x0000002A,
    BC2RGBAUnorm = 0x0000002B,
    BC2RGBAUnormSrgb = 0x0000002C,
    BC3RGBAUnorm = 0x0000002D,
    BC3RGBAUnormSrgb = 0x0000002E,
    BC4RUnorm = 0x0000002F,
    BC4RSnorm = 0x00000030,
    BC5RGUnorm = 0x00000031,
    BC5RGSnorm = 0x00000032,
    BC6HRGBUfloat = 0x00000033,
    BC6HRGBFloat = 0x00000034,
    BC7RGBAUnorm = 0x00000035,
    BC7RGBAUnormSrgb = 0x00000036,
}

impl Into<Option<wgt::TextureFormat>> for TextureFormat {
    fn into(self) -> Option<wgt::TextureFormat> {
        match self {
            TextureFormat::Undefined => None,
            TextureFormat::R8Unorm => Some(wgt::TextureFormat::R8Unorm),
            TextureFormat::R8Snorm => Some(wgt::TextureFormat::R8Snorm),
            TextureFormat::R8Uint => Some(wgt::TextureFormat::R8Uint),
            TextureFormat::R8Sint => Some(wgt::TextureFormat::R8Sint),
            TextureFormat::R16Uint => Some(wgt::TextureFormat::R16Uint),
            TextureFormat::R16Sint => Some(wgt::TextureFormat::R16Sint),
            TextureFormat::R16Float => Some(wgt::TextureFormat::R16Float),
            TextureFormat::RG8Unorm => Some(wgt::TextureFormat::Rg8Unorm),
            TextureFormat::RG8Snorm => Some(wgt::TextureFormat::Rg8Snorm),
            TextureFormat::RG8Uint => Some(wgt::TextureFormat::Rg8Uint),
            TextureFormat::RG8Sint => Some(wgt::TextureFormat::Rg8Sint),
            TextureFormat::R32Float => Some(wgt::TextureFormat::R32Float),
            TextureFormat::R32Uint => Some(wgt::TextureFormat::R32Uint),
            TextureFormat::R32Sint => Some(wgt::TextureFormat::R32Sint),
            TextureFormat::RG16Uint => Some(wgt::TextureFormat::Rg16Uint),
            TextureFormat::RG16Sint => Some(wgt::TextureFormat::Rg16Sint),
            TextureFormat::RG16Float => Some(wgt::TextureFormat::Rg16Float),
            TextureFormat::RGBA8Unorm => Some(wgt::TextureFormat::Rgba8Unorm),
            TextureFormat::RGBA8UnormSrgb => Some(wgt::TextureFormat::Rgba8UnormSrgb),
            TextureFormat::RGBA8Snorm => Some(wgt::TextureFormat::Rgba8Snorm),
            TextureFormat::RGBA8Uint => Some(wgt::TextureFormat::Rgba8Uint),
            TextureFormat::RGBA8Sint => Some(wgt::TextureFormat::Rgba8Sint),
            TextureFormat::BGRA8Unorm => Some(wgt::TextureFormat::Bgra8Unorm),
            TextureFormat::BGRA8UnormSrgb => Some(wgt::TextureFormat::Bgra8UnormSrgb),
            TextureFormat::RGB10A2Unorm => Some(wgt::TextureFormat::Rgb10a2Unorm),
            TextureFormat::RG11B10Ufloat => unimplemented!(),
            TextureFormat::RGB9E5Ufloat => unimplemented!(),
            TextureFormat::RG32Float => Some(wgt::TextureFormat::Rg32Float),
            TextureFormat::RG32Uint => Some(wgt::TextureFormat::Rg32Uint),
            TextureFormat::RG32Sint => Some(wgt::TextureFormat::Rg32Sint),
            TextureFormat::RGBA16Uint => Some(wgt::TextureFormat::Rgba16Uint),
            TextureFormat::RGBA16Sint => Some(wgt::TextureFormat::Rgba16Sint),
            TextureFormat::RGBA16Float => Some(wgt::TextureFormat::Rgba16Float),
            TextureFormat::RGBA32Float => Some(wgt::TextureFormat::Rgba32Float),
            TextureFormat::RGBA32Uint => Some(wgt::TextureFormat::Rgba32Uint),
            TextureFormat::RGBA32Sint => Some(wgt::TextureFormat::Rgba32Sint),
            TextureFormat::Depth32Float => Some(wgt::TextureFormat::Depth32Float),
            TextureFormat::Depth24Plus => Some(wgt::TextureFormat::Depth24Plus),
            TextureFormat::Depth24PlusStencil8 => Some(wgt::TextureFormat::Depth24PlusStencil8),
            TextureFormat::Stencil8 => unimplemented!(),
            TextureFormat::BC1RGBAUnorm => Some(wgt::TextureFormat::Bc1RgbaUnorm),
            TextureFormat::BC1RGBAUnormSrgb => Some(wgt::TextureFormat::Bc1RgbaUnormSrgb),
            TextureFormat::BC2RGBAUnorm => Some(wgt::TextureFormat::Bc2RgbaUnorm),
            TextureFormat::BC2RGBAUnormSrgb => Some(wgt::TextureFormat::Bc2RgbaUnormSrgb),
            TextureFormat::BC3RGBAUnorm => Some(wgt::TextureFormat::Bc3RgbaUnorm),
            TextureFormat::BC3RGBAUnormSrgb => Some(wgt::TextureFormat::Bc3RgbaUnormSrgb),
            TextureFormat::BC4RUnorm => Some(wgt::TextureFormat::Bc4RUnorm),
            TextureFormat::BC4RSnorm => Some(wgt::TextureFormat::Bc4RSnorm),
            TextureFormat::BC5RGUnorm => Some(wgt::TextureFormat::Bc5RgUnorm),
            TextureFormat::BC5RGSnorm => Some(wgt::TextureFormat::Bc5RgSnorm),
            TextureFormat::BC6HRGBUfloat => Some(wgt::TextureFormat::Bc6hRgbUfloat),
            TextureFormat::BC6HRGBFloat => Some(wgt::TextureFormat::Bc6hRgbUfloat),
            TextureFormat::BC7RGBAUnorm => Some(wgt::TextureFormat::Bc7RgbaUnorm),
            TextureFormat::BC7RGBAUnormSrgb => Some(wgt::TextureFormat::Bc7RgbaUnormSrgb),
        }
    }
}
